// srishti priya
//28-09-2025

#0 1 Knapsack :


#include <bits/stdc++.h>
using namespace std;

int solve(int idx, int W, vector<int>& wt, vector<int>& val, vector<vector<int>>& dp) {
    // Base Case
    if (idx == 0) {
        if (wt[0] <= W) return val[0];
        else return 0;
    }

    if (dp[idx][W] != -1) return dp[idx][W];

    int include = 0; // safer than INT_MIN
    if (wt[idx] <= W) {
        include = val[idx] + solve(idx - 1, W - wt[idx], wt, val, dp);
    }
    int exclude = solve(idx - 1, W, wt, val, dp);

    return dp[idx][W] = max(include, exclude);
}

int knapsack(vector<int> wt, vector<int> val, int n, int maxWeight) {
    vector<vector<int>> dp(n, vector<int>(maxWeight + 1, -1));
    return solve(n - 1, maxWeight, wt, val, dp);
}

/*int main() {
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;
    cout << "Enter capacity of knapsack: ";
    cin >> W;

    vector<int> wt(n), val(n);
    cout << "Enter weights: ";
    for (int i = 0; i < n; i++) cin >> wt[i];
    cout << "Enter values: ";
    for (int i = 0; i < n; i++) cin >> val[i];

    cout << "Maximum value in knapsack = " << knapSack(wt, val, n, W) << endl;
    return 0;
}
*/
