//srishti priya
//28-09-2025

#combination sum
You are given an array 'ARR' of 'N' distinct positive integers. You are also given a non-negative integer 'B'.
Your task is to return all unique combinations in the array whose sum equals 'B'. A number can be chosen any number of times from the array 'ARR'.
Elements in each combination must be in non-decreasing order.
For example:
Let the array 'ARR' be [1, 2, 3] and 'B' = 5. Then all possible valid combinations are-

(1, 1, 1, 1, 1)
(1, 1, 1, 2)
(1, 1, 3)
(1, 2, 2)
(2, 3)



#include <bits/stdc++.h>

int solveTab(vector<int> &nums, int tar) {
    vector<int> dp(tar + 1, 0);
    dp[0] = 1;

    for (int i = 1; i <= tar; i++) {
       for (int j = 0; j < nums.size(); j++) {
           if (i - nums[j] >= 0)
               dp[i] += dp[i - nums[j]];
       }
   }
   return dp[tar];
}

vector<vector<int>> combSum(vector<int> &ARR, int B)
{
    return solveTab( ARR, B);
}



--------------------------------new code new approach-------------------------------------------
/*
    Time Complexity: O(2^N)
    Space Complexity: O(N*2^N)
    where N is the total number of elements in the aray.
*/


#include <algorithm>
void solve(vector<vector<int>> &result, int currIndex, int currSum, 
			vector<int> &currList, int B, vector<int> &ARR)
{
	if (currSum == B)
	{
		result.push_back(currList);
		return ;
	}
	if (currIndex == ARR.size())
	{
		return ;
	}

	solve(result, currIndex + 1, currSum, currList, B, ARR);


	int count = 0;

	while (currSum <= B)
	{
		count++;

		currSum += ARR[currIndex];

		currList.push_back(ARR[currIndex]);

		solve(result, currIndex + 1, currSum, currList, B, ARR);
	}

	/* We remove ARR[currIndex] from currList, 'count'
	   number of times for backtracking */
	while (count--)
	{
		currList.pop_back();
	}
}


vector<vector<int>> combSum(vector<int> &ARR, int B)
{
	sort(ARR.begin(), ARR.end());
	
	vector<vector<int>> result;

	vector<int> currList;

	solve(result, 0, 0, currList, B, ARR);

	return result;
}
